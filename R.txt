                                   Recommended Packages
book,class,claster,codetools,foreign,kernsmooth,lattice,mgcv,nlme,rpart,survival,mass,spatial,nnet,matrix
Some useful resources on R
http://www.r-project.org/doc/bib/R-books.html
For a quick review of code and syntax.
Check out cheat sheets
https://rstudio.com/resources/cheatsheets/
Install R from https://cran.r-project.org
Rstudio installation guide
https://rstudio.com/projects/rstudio/download
1/0=Inf                                                                          Inf=(infinity)
1/Inf=0
                           R has 5 basic or atomic Classes of objects
1.a="Name",b="jgig",c="How are you"                                              Character/String
2.a=5,b=6.87,c=768                                                               Numeric
3.a=5L,b=6L,c=768L                                                               Integer
4.a=3+5i,b=34+9i                                                                 Complex
5.a=TRUE,b=FALSE,c=NA,d=NAN                                                      Logical
                            1.string/character
 str1='Hey,R is fun'
> print(str1)
[1] "Hey,R is fun"
> str2='Hey,R is funtastic'
> print(str2)
[1] "Hey,R is funtastic"
> #concatenation
> str3=paste(str1,str2)
> print(str3)
[1] "Hey,R is fun Hey,R is funtastic"
> nchar(str1)
[1] 12
> nchar(str2)
[1] 18
> nchar(str3)
[1] 31
> str4=toupper(str1)
> str4
[1] "HEY,R IS FUN"
> str5=toupper(str2)
> str6=tolower(str1)
> str6
[1] "hey,r is fun"
> str7=tolower(str2)
> str7
[1] "hey,r is funtastic"
> str8=substr(str1,4,12)
> str8
[1] ",R is fun"
> str1='Hey,R is fun'
> print(str1)
[1] "Hey,R is fun"
> str2='Hey,R is funtastic'
> print(str2)
[1] "Hey,R is funtastic"
> #concatenation
> str3=paste(str1,str2)
> print(str3)
[1] "Hey,R is fun Hey,R is funtastic"
> nchar(str1)      #To count the number of character in a string
[1] 12
> nchar(str2)     #To count the number of character in a string
[1] 18
> nchar(str3)
[1] 31
> str4=toupper(str1)        #It will change all the character into capital letter
> str4
[1] "HEY,R IS FUN"
> str5=toupper(str2)        #It will change all the character into capital letter
> str6=tolower(str1)        #It will change all the character into small letter
> str6
[1] "hey,r is fun"
> str7=tolower(str2)        #It will change all the character into small letter
> str7
[1] "hey,r is funtastic"
> str8=substr(str1,4,12)    #It will collect the character from string str1 from character 4 to character 12 
> str8
[1] ",R is fun"
> 
--------------------------------------------------------------------------------------------------
                                   Creating sequence
x<-1:8;x 
a=seq(from=1,to=10,by=2) #For odd number of sequence
a
b=seq(from=2,to=18,by=2)#For even number of sequence
b
c=seq(from=0,to=10,by=0.5)#For decimal number of sequence
c                                                                        Series
                                   Creating vector
x<-c(0.5,0.6)                                                                    Numeric vector
x<-c(TRUE,FALSE)                                                                 LOGICAL vector
x<-c(T,F)
x<-c("a","b","c")                                                                Character vector
x<-c(4:45)                                                                       Integer vector
x<-c(1+0i,2+4i)                                                                  Complex vector
x<-vector("numeric",Length=10);x                                  Another way of creating vector
--------------------------------------------------------------------------------------------------
                                   Mixing objects
y<-c(1.7,"a")                                                                    Character
y<-c(TRUE,2)                                                                     Numeric
y<-c("a",TRUE)                                                                   Character
class(y)                                                         To check the class of an object
--------------------------------------------------------------------------------------------------
                                   Explicit coercion

> x<-0:6
> x
[1] 0 1 2 3 4 5 6
> class(x)
[1] "integer"
> a=as.numeric(x)
> a
[1] 0 1 2 3 4 5 6
> class(a)
[1] "numeric"
> b=as.logical(a)
> b
[1] FALSE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE
> class(b)
[1] "logical"
> c=as.character(b)
> c
[1] "FALSE" "TRUE"  "TRUE"  "TRUE"  "TRUE"  "TRUE"  "TRUE" 
> class(c)
> d=as.complex(x)
> d
[1] 0+0i 1+0i 2+0i 3+0i 4+0i 5+0i 6+0i
> 
--------------------------------------------------------------------------------------------------
                          Nonsensical coercion results in NAs.
x<-c("a","b","c")
> x
[1] "a" "b" "c"
> a=as.numeric(x)
Warning message:
NAs introduced by coercion 
> b=as.logical(x)
> b
[1] NA NA NA
> c=as.complex(x)
--------------------------------------------------------------------------------------------------------------------------------------------
                                                    DATA TYPES
A data type in programming is a classification that specifies which type of value a variable has and what type of mathematical relational or logical operations can be applied to it without causing on error.
Data types in R:-
(1)Vector:-
           A vector is a sequance data element of the same basic type.There are 5 Atomic vectors, also termed as five classes of vectors.
Logical------------------>TRUE,FALSE,NA,NAN
Integer------------------>15L,30L,1699L
Numeric------------------>5,3.232,34353454
Complex------------------>4+3i,8+7i
Character---------------->'A',"Hey",'TRUE'
In R studio:-
>vtr1=c(TRUE,FALSE,NA,NAN)
>vtr2=c(15,85.674954,9999)
>vtr3=c(35L,58L,147L)
>vtr4c(59,445L)
>vtr5=c(TRUE,35L,3.14)
>vtr6=c("Hello","FALSE",65L)
(2)Matrix:-
           Matrix are the R objects in which the elements are arranged in a two-dimensional rectangular layout.
matrix(data,nrow,ncol,byrow,dimnames)
?matrix
Usage
matrix(data = NA, nrow = 1, ncol = 1, byrow = FALSE,
       dimnames = NULL)
NAs introduced by coercionumn 
Matrix can also be created by column binding or row-binding with cbind() and rbind()
In R studio 
 x<-1:3
> y<-10:12
> cbind(x,y)
     x  y
[1,] 1 10
[2,] 2 11
[3,] 3 12
> rbind(x,y)
  [,1] [,2] [,3]
x    1    2    3
y   10   11   12
> cbind(y,x)
      y x
[1,] 10 1
[2,] 11 2
[3,] 12 3
> rbind(y,x)
  [,1] [,2] [,3]
y   10   11   12
x    1    2    3
>mtr=matrix(c(5:29),5,5)
> mtr
     [,1] [,2] [,3] [,4] [,5]
[1,]    5   10   15   20   25
[2,]    6   11   16   21   26
[3,]    7   12   17   22   27
[4,]    8   13   18   23   28
[5,]    9   14   19   24   29
> m=matrix(nrow = 2,ncol = 3)
> m
     [,1] [,2] [,3]
[1,]   NA   NA   NA
[2,]   NA   NA   NA
> dim(m)
[1] 2 3
> attributes(m)
$dim
[1] 2 3
> > m=matrix(data=1:6,nrow = 2,ncol = 3)
> m
     [,1] [,2] [,3]
[1,]    1    3    5
[2,]    2    4    6

[1] "character"
> dim(m)
[1] 2 3
> attributes(m)
$dim
[1] 2 3
(3)List:-
         List are the R objects which contain elements of different types like-numbers,strings,vectors and another list inside it.
list(data)
In R studio:-
>vtr7=c(5.678,32,95,31.6)
>vtr8=c("Hey","How are you?","Thank you")
>mylist=list(vtr7,vtr8)
> mylist
[[1]]
[1]  5.678 32.000 95.000 31.600

[[2]]
[1] "Hey"          "How are you?" "Thank you"  
(4)Data Frame:-
               Data frame is a table or a two-dimensional array-like structure in which each column contains values of one variable and each row contains one set of values from each column.
data.frame(data):-
                  Data frames are used to store tabular data.
row.names                          [To give names to the row]
read.table()  or read.csv()        [To creat data frame]
data.matrix()                      [To change data frame into matrix]
x=data.frame(day=1:4,rain=c(T,T,F,F))
x
nrow(x)
ncol(x)
row.names(x)=c("A","B","C","D")
colnames(a)=c("ereere","oho")
x
 vtr1=c(1:5)
> vtr2=c("Neel","Jude","Adam","Adithya","Swetha")
> vtr3=c(15,24,65,145,74)
> data.frame(vtr1,vtr2,vtr3)
  vtr1    vtr2 vtr3
1    1    Neel   15
2    2    Jude   24
3    3    Adam   65
4    4 Adithya  145
5    5  Swetha   74
> data.frame(airquality)
 
  mydata=data.frame(x=rnorm(100),y=rnorm(100))
x=rnorm(100)
?sd
sd(x)
sd(x=x)
myd=rnorm(100)
sd(myd)
sd(x=myd)
sd(x=myd,na.rm = FALSE)
sd(na.rm = FALSE,x=myd) 
> --------------------------------------------------------------------------------------------------------------------------------------
                                                   Operator
Operator are the constructs which can manipulate the value of operators.
(1)Arithmetic operators
(2)Relational operators
(3)Assignment
(4)Logical operators
(1)Arithmetic operators:-
                         Plus +, subtract - ,multiply *, divide /, modulus  a%%b(gives reminder), Exponent  a^b(power) ,Floor Division  a%/%b(answer without fraction)
 In R consol                      
> a=33
> b=2
> c=a%%b
> c
[1] 1
> d=a/b
> d
[1] 16.5
> f=a^b
> f
[1] 1089
> e=a*a
> e
[1] 1089
> a=33
> b=2
> c=a%%b
> c
[1] 1
> d=a/b
> d
[1] 16.5
> f=a^b
> f
[1] 1089
> e=a*a
> e
[1] 1089
> g=a%/%b
> g
[1] 16
(2) Relational operators:-
                           a==b,a!=b,a<b,a>b,a<=b,a>=b,
(3)Assignment operator:-
                        There are two types of assignment operators.Left and Right
                      --------->Equal  x=5
LEFT-----------------|
                      --------->Assign x<-15
                      --------->Equal 34=x
RIGHT----------------|
                      --------->Assign 34->x

(4)Logical operator:-
                     There are 4 types of logical operators: AND (&) ,NOT(!),OR (|),isTRUE()

AND(&,&&)  If both sides are true then it will return true.
OR(|,||)   If only one side is true it will return true.
isTRUE() This is to check the statment is true or not.
NOT(!) It will reverse the logical veriable
 a=c(TRUE,TRUE,FALSE,TRUE)
> b=c(TRUE,FALSE,FALSE,TRUE)
> a&b
[1]  TRUE FALSE FALSE  TRUE
> a|b
[1]  TRUE  TRUE FALSE  TRUE
> !a
[1] FALSE FALSE  TRUE FALSE
> !b
[1] FALSE  TRUE  TRUE FALSE
>  isTRUE(1)
[1] FALSE
> isTRUE(TRUE)
[1] TRUE
> isTRUE(FALSE)
[1] FALSE
> isTRUE(1>0)
[1] TRUE
> w=TRUE
> !w
[1] FALSE
---------------------------------------------------------------------------------------------------------------------------------------
                                                   Conditional Statments
If,If-else if,if-elseif-else
> v1=50
> v2=35
> if ((v1+v2)>100) {
+   print("The value is greater then 100")
+ }else if ((v1+v2)>75){
+   print("The value is greater then 75")
+ }else if ((v1+v2)>50){
+   print("The value is greater then 50")
+ }else{
+   print("The value is smaller then 50")
+ }
[1] "The value is greater then 75"
x<-4
y<-0
if (x>3) {
  print(y<-10)
} else {
  print(y<-0)
}
[1] 10
> > x=1
> y<-if (x>3) {
+   10
+ } else {
+   0
+ } 
> print(y)
[1] 0
> 
switch(7,
+        '1'=print("monday"),
+        '2'=print("tuesday"),
+        '3'=print("wednesday"),
+        '4'=print("thursday"),
+        '5'=print("Friday"),
+        '6'=print("Saturday"),
+        '7'=print("sunday")
+        )
[1] "sunday"
> =-------------------------------------------------------------------------------------------------------------------------------------
                                                       LOOPS
  A loop statement allows us to execute a statment or group of statment multiple times. While,for,repeat
  While:-
         v=4
while(v<21){
  print(v)
  v=v+1
}
for:-
      


repeat:-
v=5
repeat{
  print(v)
  v=v+2
  if (v>21){
    break
  }
}
count<-0
while (count<10) {
  print(count)
  count=count+1
  
}
z<-5
while (z>=3 && z<=10) {
  print(z)
  coin<-rbinom(1,1,0.5)
  if (coin==1) {## random walk
    z<-z+1
  
}else {
  z<-z-1
}
}

 for ( i in 1:10) {
+   print(i)
+ }
[1] 1
[1] 2
[1] 3
[1] 4
[1] 5
[1] 6
[1] 7
[1] 8
[1] 9
[1] 10
> for (i in 1:4) {
+   print("ali")
+ }
[1] "ali"
[1] "ali"
[1] "ali"
[1] "ali"
> x<-c("a","b","c","d")
for (i in 1:4) {
  print(x[i])
}
for (i in seq_along(x)) {
  print(x[i])
}
for (letter in x){
  print(letter)
}
for (i in 1:4) print(x[i])
#for loops can be nested
x<-matrix(1:6,2,3)
for (i in seq_len(nrow(x))) {
  for (j in seq_len(ncol(x))) {
    print(x[i,j])
  }
}
----------------------------------------------------------------------------------------------------------------------------------------
                                                  Functions
There are two types of functions.
(1)Predefined Function
(2)User Defined Functions
                         A function is a block of organized reusable code that is used to perform a single,related action.
fibo<-function(a){
  var1=0
  var2=1
  print(var1)
  print(var2)
  for (i in 1:a) {
    var3=var1+var2
    print(var3)
    var1=var2
    var2=var3
  }
}
fibo(7)
fibo(6)
f<-function(a,b)
{a^2/b
}
f(2,4)
 f<-function(a,b)
+ {print(a)
+   print(b)
+ }
> f(45)
[1] 45
Error in print(b) : argument "b" is missing, with no default
> 
mydata<-data.frame(x=rnorm(100),y=rnorm(100))
f<-function(a=78,b=1,c=NULL){
  print(a)
  print(b)
  print(c)
}
f( ,10,2)
f( ,34, )
f(3434, ,989)
--------------------------------------------------------------------------------------------------------------------------------------
                                                   Factors
x=list(1,"a",TRUE,1+4i)
x
#Factor counted
q=factor(c("maybe","yes","yes","no","yes","no"))
q
table(x)
table(q)
unclass(x)
unclass(q)
f<-factor(c("punjab","kpk","kpk","sindh"))
f
unclass(f) 
z=factor(c("yes","yes","no","yes","no"),
         levels = c("yes","no"))
z
---------------------------------------------------------------------------------------------------------------------------------------
  	                                        Missing Values & Removing NA values
x=c(1,2,NA,10,3)
is.na(x)
is.nan(x)
y=c(1,2,NA,10,3,NaN)
is.na(y)
is.nan(y)
# A common task is to remove missing values(NAs).
x=c(2,3,NA,4,NA,5)
x
is.na(x)
bad=is.na(x)
bad
!bad
x[!bad]
sd(na.rm=TRUE,a)
sd(a)
mean(na.rm=TRUE,a)
sum(na.rm=TRUE,a)
min(na.rm=TRUE,a)
max(na.rm=TRUE,a)
#What if there are multiple things and you want to take the subset with no missing values.
x=c(1,2,NA,4,NA,5)
y=c("a","b",NA,"d",NA,"f")
good=complete.cases(x,y)
good
x[good]
y[good]
#Removing NA from airquality
airquality 
#To view the airquality
View(airquality)
good<-complete.cases(airquality)
airquality[good, ] [1:6, ]
airquality[good, ] [1:9, ]

---------------------------------------------------------------------------------------------------------------------------------------
                                                     Names
  R objects can also have names which is very useful for writing readable code and self-describing objects.
  x=1:3
names(x)
names(x)=c("col_A","col_B","col_C")
x
names(x)
#List can also have names.
y=list(a=1,b=2,c=3)
y
y$a
y$b
y$c
#Matrix can also have names
m<-matrix(1:4,nrow = 2,ncol = 2)
dimnames(m)<-list(c("a","b"),c("c","d"))
m
#data.frame can also have names 
x=data.frame(day=1:4,rain=c(T,T,F,F))
x
nrow(x)
ncol(x)
row.names(x)=c("A","B","C","D")
colnames(a)=c("ereere","oho")
----------------------------------------------------------------------------------------------------------------------------------------
                                                   Getting Help
From R gui windows.
search cRAN in google.
If just know the name of function
       ?read.table
If don't know precise name
help.search("data input")
To find in which package the function is 
        find(lowess)
If you just know the package of function.
        apropos(1m)
----------------------------------------------------------------------------------------------------------------------------------------
                                                    Subsetting
x<-list(weekday=1:4,rain_prob=0.6,item="umbrella")
x[1]
x[[1]]
x$rain_prob                  [$ sign can only be used with literal names]
x[["rain_prob"]]
x["rain_prob"]
x[3]
x$item
x["item"]
x[["item"]]
x[c(1,3)]
#Subsetting nested elements of a list.
x=list(a=list(10,12,14),b=c(3.143,2.81))
#1st method
x[[c(1,3)]]
x[[c(1,1)]]
x[[c(1,2)]]
x[[c(2,1)]]
x[[c(2,2)]]
#2nd method
x[[1]] [[3]]
x[[1]] [[2]]
x[[1]] [[1]]
x[[2]] [[1]]
x[[2]] [[2]]
#other ways of subsetting
x=c("a","b","c","c","d","a")
x[1]
x[2]
x[1:4]
x[x>"a"]
x[x>"c"]
x[x>"b"]
u<-x>"a"
u
r<-x>"b"
r
w<-x>"c"
w
#Matrix can also be subtted in the usual way with (i,j) type indices.
x=matrix(1:6,2,3)
x
x[1,2]
x[2,1]
#indices can also be missing
x[1, ]
x[ ,2]
#By default, when a single element of a matrix is retrieved,It is retured as a vector of
#length 1 rather than 1 x 1 matrix .this behavior can be turned off by setting drop=FALSE
x<-matrix(1:6,2,3)
x[1,2]
x[1,2,drop=FALSE]
#Similarly,sub-setting  a single column or a single row will give you a vector,not a matri by default
x=matrix(1:6,2,3)
x
x[1, ,drop=FALSE]
----------------------------------------------------------------------------------------------------------------------------------------
                                               Vectorized Operations
> x<-1:4;y<-6:9
> x+y
[1]  7  9 11 13
> x>2
[1] FALSE FALSE  TRUE  TRUE
> x>=2
[1] FALSE  TRUE  TRUE  TRUE
> y==8
[1] FALSE FALSE  TRUE FALSE
> x*y
[1]  6 14 24 36
> x/y
[1] 0.1666667 0.2857143 0.3750000 0.4444444
>  #Vectorized matrix operations
> x<-matrix(1:4,2,2);y<-matrix(rep(10,4),2,2)
> x*y         ##Element wise multiplaction 
     [,1] [,2]
[1,]   10   30
[2,]   20   40
> x/y
     [,1] [,2]
[1,]  0.1  0.3
[2,]  0.2  0.4
> x%*%y       ##true matrix multipation
     [,1] [,2]
[1,]   40   40
[2,]   60   60
---------------------------------------------------------------------------------------------------------------------------------------
                                                         Time
> x<-Sys.time()  # #To write the current time.This format is alread in posixct format
> x
[1] "2020-09-07 15:55:59 PKT"
> q=as.POSIXct(x)
> q
[1] "2020-09-07 15:55:59 PKT"
> p=as.POSIXlt(x)
> p
[1] "2020-09-07 15:55:59 PKT"
> names(unclass(p))
 [1] "sec"    "min"    "hour"   "mday"   "mon"    "year"   "wday"   "yday"   "isdst"  "zone"  
[11] "gmtoff"
> p$sec
[1] 59.46941
> p$mon
[1] 8
> p$min
[1] 55
> p$year
[1] 120
> p$wday
[1] 1
> p$isdst
[1] 0
> p$zone
[1] "PKT"
> p$gmtoff
[1] 18000
#To enter a date
x<-as.Date("2012-01-01")
To change date formate
datestring<-c("January,10 2012 10:40","December 9,2011 9:10")
x<-strptime(datestring, "%B %d,%Y %H:%M"
x
a<-as.Date("2012-01-01")
y<-strptime("9 jan 2011 11:34:21","%d %b %Y %H:%M:%s"
y
a-y
----------------------------------------------------------------------------------------------------------------------------------------
                                                       Loop over a list
  x<-list(a=1:5,b=rnorm(100))
lapply(x,mean)
lapply(x,sd)
lapply(x,max)
lapply(x,min)
lapply(x,sum)
#To find out seprat mean of one or 2 column.
mean(x$a)
sd(x$a)
max(x$a)
min(x$a)
sum(x$a)
mean(x$b)
sd(x$b)
max(x$b)
min(x$b)
sum(x$b)

x<-list(a=1:4,b=rnorm(100),c=rnorm(20,1),d=rnorm(100,5))
x
lapply(x,mean)
lapply(x,sd)
lapply(x,sum)
lapply(x,min)
lapply(x,max)

x<-1:4
x
lapply(x,runif)
#sapply will try to simplify the result of lapply if possible in structure form.
x<-list(a=1:5,b=rnorm(100))
sapply(x,mean)
sapply(x,sd)
sapply(x,sum)
sapply(x,min)
sapply(x,max)

a<-list(a=1:4,b=rnorm(100),c=rnorm(20,1),d=rnorm(100,5))
sapply(a,mean)
sapply(a,sd)
sapply(a,sum)
sapply(a,min)
sapply(a,max)
q<-1:4
sapply(q,mean)
sapply(q,sd)
sapply(q,sum)
sapply(q,min)
sapply(q,max)
x<-matrix(rnorm(200),20,10)
apply(x,2,mean)  #[2 means column, It will find the mean of column]
apply(x,1,mean)  #[1 means row,It will find the mean of row]
apply(x,1,sd)
apply(x,1,sum)
apply(x,1,min)
apply(x,1,max)
apply(x,2,sd)
apply(x,2,sum)
apply(x,2,min)
apply(x,2,max)
#There are some equilivent functions.
rowSums(x)
rowMeans(x)
colSums(x)
colMeans(x)
x<-matrix(rnorm(200),20,10)
?quantile
apply(x,1,quantile)
apply(x,2,quantile)
#To see the specific distribution 
apply(x,1,quantile,prob=c(0.25,0.75))
apply(x,2,quantile,prob=c(0.25,0.75))
---------------------------------------------------------------------------------------------------------------------------------------
                                                  Data split
 Split takes a vector or other objects and splits it into groups determined  by a factor or list of factor.
 x<-c(rnorm(10),runif(10),runif(10))
f<-gl(3,10)
split(x,f)
#Now,it has been converted into list. we can save it into any veriable.
lapply(split(x,f),mean)
library(datasets)
head(airquality)
?airquality
s<-split(airquality,airquality$Month)
fc<-function(x) colSums(x[,c("Ozone","Solar,R","Wind")])
lapply(s,function(x) colSums(x[,c("Ozone","Solar.R","Wind")]))
sapply(s,function(x) colMeans(x[,c("Ozone","Solar.R","Wind")]))
sapply(s,function(x) colMeans(x[,c("Ozone","Solar.R","Wind")],na.rm = TRUE))
---------------------------------------------------------------------------------------------------------------------------------------
                                               Version control(Git)
Tools--------->Global Settings--------------->git/svn
In browser find location of Git.exe in windows location is usually this.
c\users\sana_rashead\appdata\local\programs\git\bin
  here select git.exe
  Then creat RSA key,don't need to write anything to generate key then see public key and copy key go into github profile settings--------------->ssh and GpG key.Add it into ssh key.
  Title:-Rstudio
  key:-past key here 
  click on add 
  In rstudio 
  File----------->newproject--------->version control---------->git------------>add repositry url
   just in case you find any error open git bash & write git config--global http.ssverify false
